"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._authFlow = exports.signInBot = exports.signInWithPassword = exports.sendCode = exports.signInUserWithQrCode = exports.signInUser = exports.checkAuthorization = exports.start = void 0;
const tl_1 = require("../tl");
const utils = __importStar(require("../Utils"));
const Helpers_1 = require("../Helpers");
const Password_1 = require("../Password");
const QR_CODE_TIMEOUT = 30000;
// region public methods
/** @hidden */
function start(client, authParams) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!client.connected) {
            yield client.connect();
        }
        if (yield client.checkAuthorization()) {
            return;
        }
        const apiCredentials = {
            apiId: client.apiId,
            apiHash: client.apiHash,
        };
        yield _authFlow(client, apiCredentials, authParams);
    });
}
exports.start = start;
/** @hidden */
function checkAuthorization(client) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield client.invoke(new tl_1.Api.updates.GetState());
            return true;
        }
        catch (e) {
            return false;
        }
    });
}
exports.checkAuthorization = checkAuthorization;
/** @hidden */
function signInUser(client, apiCredentials, authParams) {
    return __awaiter(this, void 0, void 0, function* () {
        let phoneNumber;
        let phoneCodeHash;
        let isCodeViaApp = false;
        while (1) {
            try {
                if (typeof authParams.phoneNumber === "function") {
                    try {
                        phoneNumber = yield authParams.phoneNumber();
                    }
                    catch (err) {
                        if (err.errorMessage === "RESTART_AUTH_WITH_QR") {
                            return client.signInUserWithQrCode(apiCredentials, authParams);
                        }
                        throw err;
                    }
                }
                else {
                    phoneNumber = authParams.phoneNumber;
                }
                const sendCodeResult = yield client.sendCode(apiCredentials, phoneNumber, authParams.forceSMS);
                phoneCodeHash = sendCodeResult.phoneCodeHash;
                isCodeViaApp = sendCodeResult.isCodeViaApp;
                if (typeof phoneCodeHash !== "string") {
                    throw new Error("Failed to retrieve phone code hash");
                }
                break;
            }
            catch (err) {
                if (typeof authParams.phoneNumber !== "function") {
                    throw err;
                }
                const shouldWeStop = yield authParams.onError(err);
                if (shouldWeStop) {
                    throw new Error("AUTH_USER_CANCEL");
                }
            }
        }
        let phoneCode;
        let isRegistrationRequired = false;
        let termsOfService;
        while (1) {
            try {
                try {
                    phoneCode = yield authParams.phoneCode(isCodeViaApp);
                }
                catch (err) {
                    // This is the support for changing phone number from the phone code screen.
                    if (err.errorMessage === "RESTART_AUTH") {
                        return client.signInUser(apiCredentials, authParams);
                    }
                }
                if (!phoneCode) {
                    throw new Error("Code is empty");
                }
                // May raise PhoneCodeEmptyError, PhoneCodeExpiredError,
                // PhoneCodeHashEmptyError or PhoneCodeInvalidError.
                const result = yield client.invoke(new tl_1.Api.auth.SignIn({
                    phoneNumber,
                    phoneCodeHash,
                    phoneCode,
                }));
                if (result instanceof tl_1.Api.auth.AuthorizationSignUpRequired) {
                    isRegistrationRequired = true;
                    termsOfService = result.termsOfService;
                    break;
                }
                return result.user;
            }
            catch (err) {
                if (err.errorMessage === "SESSION_PASSWORD_NEEDED") {
                    return client.signInWithPassword(apiCredentials, authParams);
                }
                else {
                    const shouldWeStop = yield authParams.onError(err);
                    if (shouldWeStop) {
                        throw new Error("AUTH_USER_CANCEL");
                    }
                }
            }
        }
        if (isRegistrationRequired) {
            while (1) {
                try {
                    let lastName;
                    let firstName = "first name";
                    if (authParams.firstAndLastNames) {
                        const result = yield authParams.firstAndLastNames();
                        firstName = result[0];
                        lastName = result[1];
                    }
                    if (!firstName) {
                        throw new Error("First name is required");
                    }
                    const { user } = (yield client.invoke(new tl_1.Api.auth.SignUp({
                        phoneNumber,
                        phoneCodeHash,
                        firstName,
                        lastName,
                    })));
                    if (termsOfService) {
                        // This is a violation of Telegram rules: the user should be presented with and accept TOS.
                        yield client.invoke(new tl_1.Api.help.AcceptTermsOfService({
                            id: termsOfService.id,
                        }));
                    }
                    return user;
                }
                catch (err) {
                    const shouldWeStop = yield authParams.onError(err);
                    if (shouldWeStop) {
                        throw new Error("AUTH_USER_CANCEL");
                    }
                }
            }
        }
        yield authParams.onError(new Error("Auth failed"));
        return client.signInUser(apiCredentials, authParams);
    });
}
exports.signInUser = signInUser;
/** @hidden */
function signInUserWithQrCode(client, apiCredentials, authParams) {
    return __awaiter(this, void 0, void 0, function* () {
        const inputPromise = (() => __awaiter(this, void 0, void 0, function* () {
            while (1) {
                const result = yield client.invoke(new tl_1.Api.auth.ExportLoginToken({
                    apiId: Number(process.env.TELEGRAM_T_API_ID),
                    apiHash: process.env.TELEGRAM_T_API_HASH,
                    exceptIds: [],
                }));
                if (!(result instanceof tl_1.Api.auth.LoginToken)) {
                    throw new Error("Unexpected");
                }
                const { token, expires } = result;
                if (authParams.qrCode) {
                    yield Promise.race([
                        authParams.qrCode({ token, expires }),
                        Helpers_1.sleep(QR_CODE_TIMEOUT),
                    ]);
                }
            }
        }))();
        const updatePromise = new Promise((resolve) => {
            client.addEventHandler((update) => {
                if (update instanceof tl_1.Api.UpdateLoginToken) {
                    resolve(undefined);
                }
            });
        });
        try {
            yield Promise.race([updatePromise, inputPromise]);
        }
        catch (err) {
            if (err.errorMessage === "RESTART_AUTH") {
                return client.signInUser(apiCredentials, authParams);
            }
            throw err;
        }
        try {
            const result2 = yield client.invoke(new tl_1.Api.auth.ExportLoginToken({
                apiId: Number(process.env.TELEGRAM_T_API_ID),
                apiHash: process.env.TELEGRAM_T_API_HASH,
                exceptIds: [],
            }));
            if (result2 instanceof tl_1.Api.auth.LoginTokenSuccess &&
                result2.authorization instanceof tl_1.Api.auth.Authorization) {
                return result2.authorization.user;
            }
            else if (result2 instanceof tl_1.Api.auth.LoginTokenMigrateTo) {
                yield client._switchDC(result2.dcId);
                const migratedResult = yield client.invoke(new tl_1.Api.auth.ImportLoginToken({
                    token: result2.token,
                }));
                if (migratedResult instanceof tl_1.Api.auth.LoginTokenSuccess &&
                    migratedResult.authorization instanceof tl_1.Api.auth.Authorization) {
                    return migratedResult.authorization.user;
                }
            }
        }
        catch (err) {
            if (err.errorMessage === "SESSION_PASSWORD_NEEDED") {
                return client.signInWithPassword(apiCredentials, authParams);
            }
        }
        yield authParams.onError(new Error("QR auth failed"));
        return client.signInUser(apiCredentials, authParams);
    });
}
exports.signInUserWithQrCode = signInUserWithQrCode;
/** @hidden */
function sendCode(client, apiCredentials, phoneNumber, forceSMS = false) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const { apiId, apiHash } = apiCredentials;
            const sendResult = yield client.invoke(new tl_1.Api.auth.SendCode({
                phoneNumber,
                apiId,
                apiHash,
                settings: new tl_1.Api.CodeSettings({}),
            }));
            // If we already sent a SMS, do not resend the phoneCode (hash may be empty)
            if (!forceSMS || sendResult.type instanceof tl_1.Api.auth.SentCodeTypeSms) {
                return {
                    phoneCodeHash: sendResult.phoneCodeHash,
                    isCodeViaApp: sendResult.type instanceof tl_1.Api.auth.SentCodeTypeApp,
                };
            }
            const resendResult = yield client.invoke(new tl_1.Api.auth.ResendCode({
                phoneNumber,
                phoneCodeHash: sendResult.phoneCodeHash,
            }));
            return {
                phoneCodeHash: resendResult.phoneCodeHash,
                isCodeViaApp: resendResult.type instanceof tl_1.Api.auth.SentCodeTypeApp,
            };
        }
        catch (err) {
            if (err.errorMessage === "AUTH_RESTART") {
                return client.sendCode(apiCredentials, phoneNumber, forceSMS);
            }
            else {
                throw err;
            }
        }
    });
}
exports.sendCode = sendCode;
/** @hidden */
function signInWithPassword(client, apiCredentials, authParams) {
    return __awaiter(this, void 0, void 0, function* () {
        while (1) {
            try {
                const passwordSrpResult = yield client.invoke(new tl_1.Api.account.GetPassword());
                const password = yield authParams.password(passwordSrpResult.hint);
                if (!password) {
                    throw new Error("Password is empty");
                }
                const passwordSrpCheck = yield Password_1.computeCheck(passwordSrpResult, password);
                const { user } = (yield client.invoke(new tl_1.Api.auth.CheckPassword({
                    password: passwordSrpCheck,
                })));
                return user;
            }
            catch (err) {
                const shouldWeStop = yield authParams.onError(err);
                if (shouldWeStop) {
                    throw new Error("AUTH_USER_CANCEL");
                }
            }
        }
        return undefined; // Never reached (TypeScript fix)
    });
}
exports.signInWithPassword = signInWithPassword;
/** @hidden */
function signInBot(client, apiCredentials, authParams) {
    return __awaiter(this, void 0, void 0, function* () {
        const { apiId, apiHash } = apiCredentials;
        let { botAuthToken } = authParams;
        if (!botAuthToken) {
            throw new Error("a valid BotToken is required");
        }
        if (typeof botAuthToken === "function") {
            let token;
            while (true) {
                token = yield botAuthToken();
                if (token) {
                    botAuthToken = token;
                    break;
                }
            }
        }
        const { user } = (yield client.invoke(new tl_1.Api.auth.ImportBotAuthorization({
            apiId,
            apiHash,
            botAuthToken,
        })));
        return user;
    });
}
exports.signInBot = signInBot;
/** @hidden */
function _authFlow(client, apiCredentials, authParams) {
    return __awaiter(this, void 0, void 0, function* () {
        const me = "phoneNumber" in authParams
            ? yield client.signInUser(apiCredentials, authParams)
            : yield client.signInBot(apiCredentials, authParams);
        client._log.info("Signed in successfully as " + utils.getDisplayName(me));
    });
}
exports._authFlow = _authFlow;
//# sourceMappingURL=data:application/json;base64,