"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadProfilePhoto = exports._downloadPhoto = exports._downloadCachedPhotoSize = exports._downloadWebDocument = exports._downloadContact = exports._downloadDocument = exports.downloadMedia = exports.downloadFile = void 0;
const tl_1 = require("../tl");
const Utils_1 = require("../Utils");
const Helpers_1 = require("../Helpers");
const __1 = require("../");
// All types
const sizeTypes = ["w", "y", "d", "x", "c", "m", "b", "a", "s"];
// Chunk sizes for `upload.getFile` must be multiple of the smallest size
const MIN_CHUNK_SIZE = 4096;
const DEFAULT_CHUNK_SIZE = 64; // kb
const ONE_MB = 1024 * 1024;
const REQUEST_TIMEOUT = 15000;
/** @hidden */
function downloadFile(client, inputLocation, fileParams) {
    return __awaiter(this, void 0, void 0, function* () {
        let { partSizeKb, fileSize, workers = 1, end } = fileParams;
        const { dcId, progressCallback, start = 0 } = fileParams;
        end = end && end < fileSize ? end : fileSize - 1;
        if (!partSizeKb) {
            partSizeKb = fileSize
                ? Utils_1.getAppropriatedPartSize(fileSize)
                : DEFAULT_CHUNK_SIZE;
        }
        const partSize = partSizeKb * 1024;
        const partsCount = end ? Math.ceil((end - start) / partSize) : 1;
        if (partSize % MIN_CHUNK_SIZE !== 0) {
            throw new Error(`The part size must be evenly divisible by ${MIN_CHUNK_SIZE}`);
        }
        let sender;
        if (dcId) {
            try {
                sender = yield client._borrowExportedSender(dcId);
                client._log.debug(`Finished creating sender for ${dcId}`);
            }
            catch (e) {
                // This should never raise
                if (e.errorMessage === "DC_ID_INVALID") {
                    // Can't export a sender for the ID we are currently in
                    sender = client._sender;
                }
                else {
                    client._log.error(e);
                    throw e;
                }
            }
        }
        else {
            sender = client._sender;
        }
        client._log.info(`Downloading file in chunks of ${partSize} bytes`);
        const foreman = new Foreman(workers);
        const promises = [];
        let offset = start;
        // Used for files with unknown size and for manual cancellations
        let hasEnded = false;
        let progress = 0;
        if (progressCallback) {
            progressCallback(progress);
        }
        while (true) {
            let limit = partSize;
            let isPrecise = false;
            if (Math.floor(offset / ONE_MB) !==
                Math.floor((offset + limit - 1) / ONE_MB)) {
                limit = ONE_MB - (offset % ONE_MB);
                isPrecise = true;
            }
            yield foreman.requestWorker();
            if (hasEnded) {
                yield foreman.releaseWorker();
                break;
            }
            promises.push((() => __awaiter(this, void 0, void 0, function* () {
                try {
                    const result = yield Promise.race([
                        yield sender.send(new tl_1.Api.upload.GetFile({
                            location: inputLocation,
                            offset,
                            limit,
                            precise: isPrecise || undefined,
                        })),
                        Helpers_1.sleep(REQUEST_TIMEOUT).then(() => Promise.reject(new Error("REQUEST_TIMEOUT"))),
                    ]);
                    if (progressCallback) {
                        if (progressCallback.isCanceled) {
                            throw new Error("USER_CANCELED");
                        }
                        progress += 1 / partsCount;
                        progressCallback(progress);
                    }
                    if (!end && result.bytes.length < limit) {
                        hasEnded = true;
                    }
                    return result.bytes;
                }
                catch (err) {
                    hasEnded = true;
                    throw err;
                }
                finally {
                    foreman.releaseWorker();
                }
            }))());
            offset += limit;
            if (end && offset > end) {
                break;
            }
        }
        const results = yield Promise.all(promises);
        const buffers = results.filter(Boolean);
        const totalLength = end ? end + 1 - start : undefined;
        return Buffer.concat(buffers, totalLength);
    });
}
exports.downloadFile = downloadFile;
class Foreman {
    constructor(maxWorkers) {
        this.maxWorkers = maxWorkers;
        this.activeWorkers = 0;
    }
    requestWorker() {
        this.activeWorkers++;
        if (this.activeWorkers > this.maxWorkers) {
            this.deferred = createDeferred();
            return this.deferred.promise;
        }
        return Promise.resolve();
    }
    releaseWorker() {
        this.activeWorkers--;
        if (this.deferred && this.activeWorkers <= this.maxWorkers) {
            this.deferred.resolve();
        }
    }
}
function createDeferred() {
    let resolve;
    const promise = new Promise((_resolve) => {
        resolve = _resolve;
    });
    return {
        promise,
        resolve: resolve,
    };
}
/** @hidden */
function downloadMedia(client, messageOrMedia, downloadParams) {
    return __awaiter(this, void 0, void 0, function* () {
        let date;
        let media;
        if (messageOrMedia instanceof tl_1.Api.Message) {
            media = messageOrMedia.media;
        }
        else {
            media = messageOrMedia;
        }
        if (typeof media == "string") {
            throw new Error("not implemented");
        }
        if (media instanceof tl_1.Api.MessageMediaWebPage) {
            if (media.webpage instanceof tl_1.Api.WebPage) {
                media = media.webpage.document || media.webpage.photo;
            }
        }
        if (media instanceof tl_1.Api.MessageMediaPhoto || media instanceof tl_1.Api.Photo) {
            return _downloadPhoto(client, media, downloadParams);
        }
        else if (media instanceof tl_1.Api.MessageMediaDocument ||
            media instanceof tl_1.Api.Document) {
            return _downloadDocument(client, media, downloadParams);
        }
        else if (media instanceof tl_1.Api.MessageMediaContact) {
            return _downloadContact(client, media, downloadParams);
        }
        else if (media instanceof tl_1.Api.WebDocument ||
            media instanceof tl_1.Api.WebDocumentNoProxy) {
            return _downloadWebDocument(client, media, downloadParams);
        }
        else {
            return Buffer.alloc(0);
        }
    });
}
exports.downloadMedia = downloadMedia;
function _downloadDocument(client, doc, args) {
    return __awaiter(this, void 0, void 0, function* () {
        if (doc instanceof tl_1.Api.MessageMediaDocument) {
            if (!doc.document) {
                return Buffer.alloc(0);
            }
            doc = doc.document;
        }
        if (!(doc instanceof tl_1.Api.Document)) {
            return Buffer.alloc(0);
        }
        let size = undefined;
        if (args.sizeType) {
            size = doc.thumbs ? pickFileSize(doc.thumbs, args.sizeType) : undefined;
            if (!size && doc.mimeType.startsWith("video/")) {
                return Buffer.alloc(0);
            }
            if (size &&
                (size instanceof tl_1.Api.PhotoCachedSize ||
                    size instanceof tl_1.Api.PhotoStrippedSize)) {
                return _downloadCachedPhotoSize(size);
            }
        }
        return client.downloadFile(new tl_1.Api.InputDocumentFileLocation({
            id: doc.id,
            accessHash: doc.accessHash,
            fileReference: doc.fileReference,
            thumbSize: size ? size.type : "",
        }), {
            fileSize: size && !(size instanceof tl_1.Api.PhotoSizeEmpty)
                ? size instanceof tl_1.Api.PhotoSizeProgressive
                    ? Math.max(...size.sizes)
                    : size.size
                : doc.size,
            progressCallback: args.progressCallback,
            start: args.start,
            end: args.end,
            dcId: doc.dcId,
            workers: args.workers,
        });
    });
}
exports._downloadDocument = _downloadDocument;
function _downloadContact(client, media, args) {
    return __awaiter(this, void 0, void 0, function* () {
        throw new Error("not implemented");
    });
}
exports._downloadContact = _downloadContact;
function _downloadWebDocument(client, media, args) {
    return __awaiter(this, void 0, void 0, function* () {
        throw new Error("not implemented");
    });
}
exports._downloadWebDocument = _downloadWebDocument;
function pickFileSize(sizes, sizeType) {
    if (!sizeType || !sizes || !sizes.length) {
        return undefined;
    }
    const indexOfSize = sizeTypes.indexOf(sizeType);
    let size;
    for (let i = indexOfSize; i < sizeTypes.length; i++) {
        size = sizes.find((s) => s.type === sizeTypes[i]);
        if (size && !(size instanceof tl_1.Api.PhotoPathSize)) {
            return size;
        }
    }
    return undefined;
}
function _downloadCachedPhotoSize(size) {
    // No need to download anything, simply write the bytes
    let data;
    if (size instanceof tl_1.Api.PhotoStrippedSize) {
        data = Utils_1.strippedPhotoToJpg(size.bytes);
    }
    else {
        data = size.bytes;
    }
    return data;
}
exports._downloadCachedPhotoSize = _downloadCachedPhotoSize;
function _downloadPhoto(client, photo, args) {
    return __awaiter(this, void 0, void 0, function* () {
        if (photo instanceof tl_1.Api.MessageMediaPhoto) {
            if (photo.photo instanceof tl_1.Api.PhotoEmpty || !photo.photo) {
                return Buffer.alloc(0);
            }
            photo = photo.photo;
        }
        if (!(photo instanceof tl_1.Api.Photo)) {
            return Buffer.alloc(0);
        }
        const size = pickFileSize(photo.sizes, args.sizeType || sizeTypes[0]);
        if (!size || size instanceof tl_1.Api.PhotoSizeEmpty) {
            return Buffer.alloc(0);
        }
        if (size instanceof tl_1.Api.PhotoCachedSize ||
            size instanceof tl_1.Api.PhotoStrippedSize) {
            return _downloadCachedPhotoSize(size);
        }
        return client.downloadFile(new tl_1.Api.InputPhotoFileLocation({
            id: photo.id,
            accessHash: photo.accessHash,
            fileReference: photo.fileReference,
            thumbSize: size.type,
        }), {
            dcId: photo.dcId,
            fileSize: size instanceof tl_1.Api.PhotoSizeProgressive
                ? Math.max(...size.sizes)
                : size.size,
            progressCallback: args.progressCallback,
        });
    });
}
exports._downloadPhoto = _downloadPhoto;
/** @hidden */
function downloadProfilePhoto(client, entity, fileParams) {
    return __awaiter(this, void 0, void 0, function* () {
        entity = yield client.getEntity(entity);
        let photo;
        if ("photo" in entity) {
            photo = entity.photo;
        }
        else {
            throw new Error(`Could not get photo from ${entity ? entity.className : undefined}`);
        }
        let dcId;
        let loc;
        if (photo instanceof tl_1.Api.UserProfilePhoto ||
            photo instanceof tl_1.Api.ChatPhoto) {
            dcId = photo.dcId;
            loc = new tl_1.Api.InputPeerPhotoFileLocation({
                peer: __1.utils.getInputPeer(entity),
                photoId: photo.photoId,
                big: fileParams.isBig,
            });
        }
        else {
            return Buffer.alloc(0);
        }
        return client.downloadFile(loc, {
            dcId,
            fileSize: 2 * 1024 * 1024,
            workers: 1,
        });
    });
}
exports.downloadProfilePhoto = downloadProfilePhoto;
//# sourceMappingURL=data:application/json;base64,