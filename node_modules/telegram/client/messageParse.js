"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._getResponseMessage = exports._parseMessageText = exports._replaceWithMention = exports.DEFAULT_DELIMITERS = void 0;
const Utils_1 = require("../Utils");
const tl_1 = require("../tl");
const index_1 = require("../index");
const Helpers_1 = require("../Helpers");
const message_1 = require("../tl/custom/message");
const big_integer_1 = __importDefault(require("big-integer"));
exports.DEFAULT_DELIMITERS = {
    "**": tl_1.Api.MessageEntityBold,
    __: tl_1.Api.MessageEntityItalic,
    "~~": tl_1.Api.MessageEntityStrike,
    "`": tl_1.Api.MessageEntityCode,
    "```": tl_1.Api.MessageEntityPre,
};
function _replaceWithMention(client, entities, i, user) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            entities[i] = new tl_1.Api.InputMessageEntityMentionName({
                offset: entities[i].offset,
                length: entities[i].length,
                userId: yield client.getInputEntity(user),
            });
            return true;
        }
        catch (e) {
            return false;
        }
    });
}
exports._replaceWithMention = _replaceWithMention;
function _parseMessageText(client, message, parseMode) {
    if (parseMode == false) {
        return [message, []];
    }
    if (parseMode == undefined) {
        if (client.parseMode == undefined) {
            return [message, []];
        }
        parseMode = client.parseMode;
    }
    else if (typeof parseMode === "string") {
        parseMode = Utils_1.sanitizeParseMode(parseMode);
    }
    return parseMode.parse(message);
}
exports._parseMessageText = _parseMessageText;
function _getResponseMessage(client, request, result, inputChat) {
    let updates = [];
    let entities = new Map();
    if (result instanceof tl_1.Api.UpdateShort) {
        updates = [result.update];
    }
    else if (result instanceof tl_1.Api.Updates ||
        result instanceof tl_1.Api.UpdatesCombined) {
        updates = result.updates;
        for (const x of [...result.users, ...result.chats]) {
            entities.set(index_1.utils.getPeerId(x), x);
        }
    }
    else {
        return;
    }
    const randomToId = new Map();
    const idToMessage = new Map();
    const schedToMessage = new Map();
    for (const update of updates) {
        if (update instanceof tl_1.Api.UpdateMessageID) {
            randomToId.set(update.randomId.toString(), update.id);
        }
        else if (update instanceof tl_1.Api.UpdateNewChannelMessage ||
            update instanceof tl_1.Api.UpdateNewMessage) {
            update.message._finishInit(client, entities, inputChat);
            if ("randomId" in request || Helpers_1.isArrayLike(request)) {
                idToMessage.set(update.message.id, update.message);
            }
            else {
                return update.message;
            }
        }
        else if (update instanceof tl_1.Api.UpdateEditMessage &&
            "peer" in request &&
            Helpers_1._entityType(request.peer) != Helpers_1._EntityType.CHANNEL) {
            update.message._finishInit(client, entities, inputChat);
            if ("randomId" in request) {
                idToMessage.set(update.message.id, update.message);
            }
            else if ("id" in request && request.id === update.message.id) {
                return update.message;
            }
        }
        else if (update instanceof tl_1.Api.UpdateEditChannelMessage &&
            "peer" in request &&
            Utils_1.getPeerId(request.peer) ==
                Utils_1.getPeerId(update.message.peerId)) {
            if (request.id == update.message.id) {
                update.message._finishInit(client, entities, inputChat);
                return update.message;
            }
        }
        else if (update instanceof tl_1.Api.UpdateNewScheduledMessage) {
            update.message._finishInit(client, entities, inputChat);
            schedToMessage.set(update.message.id, update.message);
        }
        else if (update instanceof tl_1.Api.UpdateMessagePoll) {
            if (request.media.poll.id == update.pollId) {
                const m = new message_1.Message({
                    id: request.id,
                    peerId: index_1.utils.getPeerId(request.peer),
                    media: new tl_1.Api.MessageMediaPoll({
                        poll: update.poll,
                        results: update.results,
                    }),
                    message: "",
                    date: 0,
                });
                m._finishInit(client, entities, inputChat);
                return m;
            }
        }
    }
    if (request == undefined) {
        return idToMessage;
    }
    let randomId = Helpers_1.isArrayLike(request) ||
        typeof request == "number" ||
        big_integer_1.default.isInstance(request)
        ? request
        : request.randomId.toString();
    if (!randomId) {
        client._log.warn(`No randomId in ${request} to map to. returning undefined for ${result}`);
        return undefined;
    }
    if (!Helpers_1.isArrayLike(randomId)) {
        const msg = idToMessage.get(randomToId.get(randomId));
        if (!msg) {
            client._log.warn(`Request ${request} had missing message mapping ${result}`);
        }
        return msg;
    }
    else {
        const mapping = [];
        for (let i = 0; i < randomId.length; i++) {
            const rnd = randomId[i] + "";
            const msg = idToMessage.get(randomToId.get(rnd));
            if (!msg) {
                client._log.warn(`Request ${request} had missing message mapping ${result}`);
                break;
            }
            else {
                mapping.push(msg);
            }
        }
        return mapping;
    }
}
exports._getResponseMessage = _getResponseMessage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZVBhcnNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vZ3JhbWpzL2NsaWVudC9tZXNzYWdlUGFyc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsb0NBQXdEO0FBQ3hELDhCQUE0QjtBQUc1QixvQ0FBaUM7QUFDakMsd0NBQW1FO0FBQ25FLGtEQUErQztBQUMvQyw4REFBaUM7QUFRcEIsUUFBQSxrQkFBa0IsR0FFM0I7SUFDQSxJQUFJLEVBQUUsUUFBRyxDQUFDLGlCQUFpQjtJQUMzQixFQUFFLEVBQUUsUUFBRyxDQUFDLG1CQUFtQjtJQUMzQixJQUFJLEVBQUUsUUFBRyxDQUFDLG1CQUFtQjtJQUM3QixHQUFHLEVBQUUsUUFBRyxDQUFDLGlCQUFpQjtJQUMxQixLQUFLLEVBQUUsUUFBRyxDQUFDLGdCQUFnQjtDQUM5QixDQUFDO0FBU0YsU0FBc0IsbUJBQW1CLENBQ3JDLE1BQXNCLEVBQ3RCLFFBQWlDLEVBQ2pDLENBQVMsRUFDVCxJQUFnQjs7UUFFaEIsSUFBSTtZQUNBLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLFFBQUcsQ0FBQyw2QkFBNkIsQ0FBQztnQkFDaEQsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNO2dCQUMxQixNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU07Z0JBQzFCLE1BQU0sRUFBRSxNQUFNLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO2FBQzVDLENBQUMsQ0FBQztZQUNILE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNSLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO0lBQ0wsQ0FBQztDQUFBO0FBaEJELGtEQWdCQztBQUVELFNBQWdCLGlCQUFpQixDQUM3QixNQUFzQixFQUN0QixPQUFlLEVBQ2YsU0FBMEM7SUFFMUMsSUFBSSxTQUFTLElBQUksS0FBSyxFQUFFO1FBQ3BC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