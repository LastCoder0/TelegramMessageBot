"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._updateLoop = exports._dispatchUpdate = exports._processUpdate = exports._handleUpdate = exports.catchUp = exports.listEventHandlers = exports.removeEventHandler = exports.addEventHandler = exports.on = void 0;
const tl_1 = require("../tl");
const __1 = require("../");
const big_integer_1 = __importDefault(require("big-integer"));
const network_1 = require("../network");
const index_1 = require("../index");
// export class UpdateMethods
function on(client, event) {
    return (f) => {
        client.addEventHandler(f, event);
        return f;
    };
}
exports.on = on;
function addEventHandler(client, callback, event) {
    if (event == undefined) {
        // recursive imports :(
        const raw = require("../events/Raw").Raw;
        event = new raw({});
    }
    event.client = client;
    client._eventBuilders.push([event, callback]);
}
exports.addEventHandler = addEventHandler;
function removeEventHandler(client, callback, event) {
    client._eventBuilders = client._eventBuilders.filter(function (item) {
        return item !== [event, callback];
    });
}
exports.removeEventHandler = removeEventHandler;
function listEventHandlers(client) {
    return client._eventBuilders;
}
exports.listEventHandlers = listEventHandlers;
function catchUp() {
    // TODO
}
exports.catchUp = catchUp;
function _handleUpdate(client, update) {
    if (typeof update === "number") {
        if ([-1, 0, 1].includes(update)) {
            _dispatchUpdate(client, {
                update: new network_1.UpdateConnectionState(update),
            });
            return;
        }
    }
    //this.session.processEntities(update)
    client._entityCache.add(update);
    client.session.processEntities(update);
    if (update instanceof tl_1.Api.Updates ||
        update instanceof tl_1.Api.UpdatesCombined) {
        // TODO deal with entities
        const entities = new Map();
        for (const x of [...update.users, ...update.chats]) {
            entities.set(index_1.utils.getPeerId(x), x);
        }
        for (const u of update.updates) {
            _processUpdate(client, u, update.updates, entities);
        }
    }
    else if (update instanceof tl_1.Api.UpdateShort) {
        _processUpdate(client, update.update, null);
    }
    else {
        _processUpdate(client, update, null);
    }
}
exports._handleUpdate = _handleUpdate;
function _processUpdate(client, update, others, entities) {
    update._entities = entities || new Map();
    const args = {
        update: update,
        others: others,
    };
    _dispatchUpdate(client, args);
}
exports._processUpdate = _processUpdate;
function _dispatchUpdate(client, args) {
    return __awaiter(this, void 0, void 0, function* () {
        for (const [builder, callback] of client._eventBuilders) {
            if (!builder.resolved) {
                yield builder.resolve(client);
            }
            let event = args.update;
            if (event) {
                if (!client._selfInputPeer) {
                    yield client.getMe(true);
                }
                if (!(event instanceof network_1.UpdateConnectionState)) {
                    // TODO fix me
                }
                // TODO fix others not being passed
                event = builder.build(event, undefined, callback);
                if (event) {
                    if ("_eventName" in event) {
                        event._setClient(client);
                        event.originalUpdate = args.update;
                        event._entities = args.update._entities;
                    }
                    const filter = yield builder.filter(event);
                    if (!filter) {
                        continue;
                    }
                    try {
                        yield callback(event);
                    }
                    catch (e) {
                        console.error(e);
                    }
                }
            }
        }
    });
}
exports._dispatchUpdate = _dispatchUpdate;
function _updateLoop(client) {
    return __awaiter(this, void 0, void 0, function* () {
        while (client.connected) {
            const rnd = __1.helpers.getRandomInt(Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
            yield __1.helpers.sleep(1000 * 60);
            // We don't care about the result we just want to send it every
            // 60 seconds so telegram doesn't stop the connection
            try {
                client._sender.send(new tl_1.Api.Ping({
                    pingId: big_integer_1.default(rnd),
                }));
            }
            catch (e) {
                //await client.disconnect()
            }
            // We need to send some content-related request at least hourly
            // for Telegram to keep delivering updates, otherwise they will
            // just stop even if we're connected. Do so every 30 minutes.
            // TODO Call getDifference instead since it's more relevant
            if (!client._lastRequest ||
                new Date().getTime() - client._lastRequest > 30 * 60 * 1000) {
                try {
                    yield client.invoke(new tl_1.Api.updates.GetState());
                }
                catch (e) { }
            }
        }
    });
}
exports._updateLoop = _updateLoop;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2dyYW1qcy9jbGllbnQvdXBkYXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFDQSw4QkFBNEI7QUFDNUIsMkJBQThCO0FBRTlCLDhEQUFpQztBQUNqQyx3Q0FBbUQ7QUFFbkQsb0NBQWlDO0FBRWpDLDZCQUE2QjtBQUM3QixTQUFnQixFQUFFLENBQUMsTUFBc0IsRUFBRSxLQUFvQjtJQUMzRCxPQUFPLENBQUMsQ0FBeUIsRUFBRSxFQUFFO1FBQ2pDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2pDLE9BQU8sQ0FBQyxDQUFDO0lBQ2IsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQUxELGdCQUtDO0FBRUQsU0FBZ0IsZUFBZSxDQUMzQixNQUFzQixFQUN0QixRQUEwQixFQUMxQixLQUFvQjtJQUVwQixJQUFJLEtBQUssSUFBSSxTQUFTLEVBQUU7UUFDcEIsdUJBQXVCO1FBQ3ZCLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDekMsS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBUSxDQUFDO0tBQzlCO0lBQ0QsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDdEIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBWkQsMENBWUM7QUFFRCxTQUFnQixrQkFBa0IsQ0FDOUIsTUFBc0IsRUFDdEIsUUFBMEIsRUFDMUIsS0FBbUI7SUFFbkIsTUFBTSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUk7UUFDL0QsT0FBTyxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDdEMsQ0FB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