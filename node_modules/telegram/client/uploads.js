"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendFile = exports.uploadFile = exports.CustomFile = void 0;
const tl_1 = require("../tl");
const Helpers_1 = require("../Helpers");
const Utils_1 = require("../Utils");
const path_1 = __importDefault(require("path"));
const fs_1 = require("fs");
const index_1 = require("../index");
const messageParse_1 = require("./messageParse");
/**
 * A custom file class that mimics the browser's File class.<br/>
 * You should use this whenever you want to upload a file.
 */
class CustomFile {
    constructor(name, size, path, buffer) {
        this.name = name;
        this.size = size;
        this.path = path;
        this.buffer = buffer;
    }
}
exports.CustomFile = CustomFile;
const KB_TO_BYTES = 1024;
const LARGE_FILE_THRESHOLD = 10 * 1024 * 1024;
const UPLOAD_TIMEOUT = 15 * 1000;
/** @hidden */
function uploadFile(client, fileParams) {
    return __awaiter(this, void 0, void 0, function* () {
        const { file, onProgress } = fileParams;
        let { workers } = fileParams;
        const { name, size } = file;
        const fileId = Helpers_1.readBigIntFromBuffer(Helpers_1.generateRandomBytes(8), true, true);
        const isLarge = size > LARGE_FILE_THRESHOLD;
        const partSize = Utils_1.getAppropriatedPartSize(size) * KB_TO_BYTES;
        const partCount = Math.floor((size + partSize - 1) / partSize);
        const buffer = Buffer.from(yield fileToBuffer(file));
        // We always upload from the DC we are in.
        const sender = yield client._borrowExportedSender(client.session.dcId);
        if (!workers || !size) {
            workers = 1;
        }
        if (workers >= partCount) {
            workers = partCount;
        }
        let progress = 0;
        if (onProgress) {
            onProgress(progress);
        }
        for (let i = 0; i < partCount; i += workers) {
            let sendingParts = [];
            let end = i + workers;
            if (end > partCount) {
                end = partCount;
            }
            for (let j = i; j < end; j++) {
                const bytes = buffer.slice(j * partSize, (j + 1) * partSize);
                sendingParts.push((() => __awaiter(this, void 0, void 0, function* () {
                    yield sender.send(isLarge
                        ? new tl_1.Api.upload.SaveBigFilePart({
                            fileId,
                            filePart: j,
                            fileTotalParts: partCount,
                            bytes,
                        })
                        : new tl_1.Api.upload.SaveFilePart({
                            fileId,
                            filePart: j,
                            bytes,
                        }));
                    if (onProgress) {
                        if (onProgress.isCanceled) {
                            throw new Error("USER_CANCELED");
                        }
                        progress += 1 / partCount;
                        onProgress(progress);
                    }
                }))());
            }
            try {
                yield Promise.race([
                    yield Promise.all(sendingParts),
                    Helpers_1.sleep(UPLOAD_TIMEOUT * workers).then(() => Promise.reject(new Error("TIMEOUT"))),
                ]);
            }
            catch (err) {
                if (err.error === "TIMEOUT") {
                    console.warn("Upload timeout. Retrying...");
                    i -= workers;
                    continue;
                }
                throw err;
            }
        }
        return isLarge
            ? new tl_1.Api.InputFileBig({
                id: fileId,
                parts: partCount,
                name,
            })
            : new tl_1.Api.InputFile({
                id: fileId,
                parts: partCount,
                name,
                md5Checksum: "", // This is not a "flag", so not sure if we can make it optional.
            });
    });
}
exports.uploadFile = uploadFile;
function _fileToMedia(client, { file, forceDocument, fileSize, progressCallback, attributes, thumb, voiceNote = false, videoNote = false, supportsStreaming = false, mimeType, asImage, workers = 1, }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!file) {
            return { fileHandle: undefined, media: undefined, image: undefined };
        }
        const isImage = index_1.utils.isImage(file);
        if (asImage == undefined) {
            asImage = isImage && !forceDocument;
        }
        if (typeof file == "object" &&
            !Buffer.isBuffer(file) &&
            !(file instanceof tl_1.Api.InputFile) &&
            !(file instanceof tl_1.Api.InputFileBig) &&
            !("read" in file)) {
            try {
                return {
                    fileHandle: undefined,
                    media: index_1.utils.getInputMedia(file, {
                        isPhoto: asImage,
                        attributes: attributes,
                        forceDocument: forceDocument,
                        voiceNote: voiceNote,
                        videoNote: videoNote,
                        supportsStreaming: supportsStreaming,
                    }),
                    image: asImage,
                };
            }
            catch (e) {
                return {
                    fileHandle: undefined,
                    media: undefined,
                    image: isImage,
                };
            }
        }
        let media;
        let fileHandle;
        let createdFile;
        if (file instanceof tl_1.Api.InputFile || file instanceof tl_1.Api.InputFileBig) {
            fileHandle = file;
        }
        else if (!(typeof file == "string") || (yield fs_1.promises.lstat(file)).isFile()) {
            if (typeof file == "string") {
                createdFile = new CustomFile(path_1.default.basename(file), (yield fs_1.promises.stat(file)).size, file);
            }
            else if (typeof File !== "undefined" && file instanceof File) {
                createdFile = file;
            }
            else {
                let name;
                if ("name" in file) {
                    // @ts-ignore
                    name = file.name;
                }
                else {
                    name = "unnamed";
                }
                if (file instanceof Buffer) {
                    createdFile = new CustomFile(name, file.length, "", file);
                }
            }
            if (!createdFile) {
                throw new Error(`Could not create file from ${JSON.stringify(file)}`);
            }
            fileHandle = yield uploadFile(client, {
                file: createdFile,
                onProgress: progressCallback,
                workers: workers,
            });
        }
        else if (file.startsWith("https://") || file.startsWith("http://")) {
            if (asImage) {
                media = new tl_1.Api.InputMediaPhotoExternal({ url: file });
            }
            else {
                media = new tl_1.Api.InputMediaPhotoExternal({ url: file });
            }
        }
        else {
            throw new Error(`"Not a valid path nor a url ${file}`);
        }
        if (media != undefined) {
        }
        else if (fileHandle == undefined) {
            throw new Error(`Failed to convert ${file} to media. Not an existing file or an HTTP URL`);
        }
        else if (asImage) {
            media = new tl_1.Api.InputMediaUploadedPhoto({
                file: fileHandle,
            });
        }
        else {
            // @ts-ignore
            let res = index_1.utils.getAttributes(file, {
                mimeType: mimeType,
                attributes: attributes,
                forceDocument: forceDocument && !isImage,
                voiceNote: voiceNote,
                videoNote: videoNote,
                supportsStreaming: supportsStreaming,
                thumb: thumb,
            });
            attributes = res.attrs;
            mimeType = res.mimeType;
            let uploadedThumb;
            if (!thumb) {
                uploadedThumb = undefined;
            }
            else {
                // todo refactor
                if (typeof thumb == "string") {
                    uploadedThumb = new CustomFile(path_1.default.basename(thumb), (yield fs_1.promises.stat(thumb)).size, thumb);
                }
                else if (typeof File !== "undefined" && thumb instanceof File) {
                    uploadedThumb = thumb;
                }
                else {
                    let name;
                    if ("name" in thumb) {
                        name = thumb.name;
                    }
                    else {
                        name = "unnamed";
                    }
                    if (thumb instanceof Buffer) {
                        uploadedThumb = new CustomFile(name, thumb.length, "", thumb);
                    }
                }
                if (!uploadedThumb) {
                    throw new Error(`Could not create file from ${file}`);
                }
                uploadedThumb = yield uploadFile(client, {
                    file: uploadedThumb,
                    workers: 1,
                });
            }
            media = new tl_1.Api.InputMediaUploadedDocument({
                file: fileHandle,
                mimeType: mimeType,
                attributes: attributes,
                thumb: uploadedThumb,
                forceFile: forceDocument && !isImage,
            });
        }
        return {
            fileHandle: fileHandle,
            media: media,
            image: asImage,
        };
    });
}
function sendFile(client, entity, { file, caption, forceDocument = false, fileSize, clearDraft = false, progressCallback, replyTo, attributes, thumb, parseMode, formattingEntities, voiceNote = false, videoNote = false, buttons, silent, supportsStreaming = false, scheduleDate, workers = 1, }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!file) {
            throw new Error("You need to specify a file");
        }
        if (!caption) {
            caption = "";
        }
        entity = yield client.getInputEntity(entity);
        replyTo = index_1.utils.getMessageId(replyTo);
        // TODO support albums in the future
        let msgEntities;
        if (formattingEntities != undefined) {
            msgEntities = formattingEntities;
        }
        else {
            [caption, msgEntities] = yield messageParse_1._parseMessageText(client, caption, parseMode);
        }
        const { fileHandle, media, image } = yield _fileToMedia(client, {
            file: file,
            forceDocument: forceDocument,
            fileSize: fileSize,
            progressCallback: progressCallback,
            attributes: attributes,
            thumb: thumb,
            voiceNote: voiceNote,
            videoNote: videoNote,
            supportsStreaming: supportsStreaming,
            workers: workers,
        });
        if (media == undefined) {
            throw new Error(`Cannot use ${file} as file.`);
        }
        const markup = client.buildReplyMarkup(buttons);
        const request = new tl_1.Api.messages.SendMedia({
            peer: entity,
            media: media,
            replyToMsgId: replyTo,
            message: caption,
            entities: msgEntities,
            replyMarkup: markup,
            silent: silent,
            scheduleDate: scheduleDate,
            clearDraft: clearDraft,
        });
        const result = yield client.invoke(request);
        return client._getResponseMessage(request, result, entity);
    });
}
exports.sendFile = sendFile;
function fileToBuffer(file) {
    if (typeof File !== "undefined" && file instanceof File) {
        return new Response(file).arrayBuffer();
    }
    else if (file instanceof CustomFile) {
        if (file.buffer != undefined) {
            return file.buffer;
        }
        else {
            return fs_1.promises.readFile(file.path);
        }
    }
    else {
        throw new Error("Could not create buffer from file " + file);
    }
}
//# sourceMappingURL=data:application/json;base64,