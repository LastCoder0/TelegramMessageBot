"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventCommon = exports.EventBuilder = exports._intoIdSet = void 0;
const tl_1 = require("../tl");
const custom_1 = require("../tl/custom");
const Helpers_1 = require("../Helpers");
const __1 = require("../");
/** @hidden */
function _intoIdSet(client, chats) {
    return __awaiter(this, void 0, void 0, function* () {
        if (chats == undefined) {
            return undefined;
        }
        if (!Helpers_1.isArrayLike(chats)) {
            chats = [chats];
        }
        const result = new Set();
        for (let chat of chats) {
            if (typeof chat == "number") {
                if (chat < 0) {
                    result.add(chat);
                }
                else {
                    result.add(__1.utils.getPeerId(new tl_1.Api.PeerUser({
                        userId: chat,
                    })));
                    result.add(__1.utils.getPeerId(new tl_1.Api.PeerChat({
                        chatId: chat,
                    })));
                    result.add(__1.utils.getPeerId(new tl_1.Api.PeerChannel({
                        channelId: chat,
                    })));
                }
            }
            else if (typeof chat == "object" &&
                chat.SUBCLASS_OF_ID == 0x2d45687) {
                result.add(__1.utils.getPeerId(chat));
            }
            else {
                chat = yield client.getInputEntity(chat);
                if (chat instanceof tl_1.Api.InputPeerSelf) {
                    chat = yield client.getMe(true);
                }
                result.add(__1.utils.getPeerId(chat));
            }
        }
        return Array.from(result);
    });
}
exports._intoIdSet = _intoIdSet;
/**
 * The common event builder, with builtin support to filter per chat.<br/>
 * All events inherit this.
 */
class EventBuilder {
    constructor(eventParams) {
        this.chats = eventParams.chats;
        this.blacklistChats = eventParams.blacklistChats || false;
        this.resolved = false;
        this.func = eventParams.func;
    }
    build(update, others, callback) {
        if (update)
            return update;
    }
    resolve(client) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.resolved) {
                return;
            }
            yield this._resolve(client);
            this.resolved = true;
        });
    }
    _resolve(client) {
        return __awaiter(this, void 0, void 0, function* () {
            this.chats = yield _intoIdSet(client, this.chats);
        });
    }
    filter(event) {
        if (!this.resolved) {
            return;
        }
        if (this.chats != undefined && event.chatId != undefined) {
            const inside = this.chats.includes(event.chatId);
            if (inside == this.blacklistChats) {
                // If this chat matches but it's a blacklist ignore.
                // If it doesn't match but it's a whitelist ignore.
                return;
            }
        }
        if (this.func && !this.func(event)) {
            return;
        }
        return event;
    }
}
exports.EventBuilder = EventBuilder;
class EventCommon extends custom_1.ChatGetter {
    constructor({ chatPeer = undefined, msgId = undefined, broadcast = undefined, }) {
        super({ chatPeer, broadcast });
        this._eventName = "Event";
        this._entities = new Map();
        this._client = undefined;
        this._messageId = msgId;
    }
    _setClient(client) {
        this._client = client;
    }
    get client() {
        return this._client;
    }
}
exports.EventCommon = EventCommon;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vZ3JhbWpzL2V2ZW50cy9jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsOEJBQTRCO0FBRTVCLHlDQUEwQztBQUcxQyx3Q0FBeUM7QUFDekMsMkJBQTRCO0FBRTVCLGNBQWM7QUFDZCxTQUFzQixVQUFVLENBQzVCLE1BQXNCLEVBQ3RCLEtBQTRDOztRQUU1QyxJQUFJLEtBQUssSUFBSSxTQUFTLEVBQUU7WUFDcEIsT0FBTyxTQUFTLENBQUM7U0FDcEI7UUFDRCxJQUFJLENBQUMscUJBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNyQixLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNuQjtRQUNELE1BQU0sTUFBTSxHQUFnQixJQUFJLEdBQUcsRUFBVSxDQUFDO1FBQzlDLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxFQUFFO1lBQ3BCLElBQUksT0FBTyxJQUFJLElBQUksUUFBUSxFQUFFO2dCQUN6QixJQUFJLElBQUksR0FBRyxDQUFDLEVBQUU7b0JBQ1YsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDcEI7cUJBQU07b0JBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FDTixTQUFLLENBQUMsU0FBUyxDQUNYLElBQUksUUFBRyxDQUFDLFFBQVEsQ0FBQzt3QkFDYixNQUFNLEVBQUUsSUFBSTtxQkFDZixDQUFDLENBQ0wsQ0FDSixDQUFDO29CQUNGLE1BQU0sQ0FBQyxHQUFHLENBQ04sU0FBSyxDQUFDLFNBQVMsQ0FDWCxJQUFJLFFBQUcsQ0FBQyxRQUFRLENBQUM7d0JBQ2IsTUFBTSxFQUFFLElBQUk7cUJBQ2YsQ0FBQyxDQUNMLENBQ0osQ0FBQztvQkFDRixNQUFNLENBQUMsR0FBRyxDQUNOLFNBQUssQ0FBQyxTQUFTLENBQ1gsSUFBSSxRQUFHLENBQUMsV0FBVyxDQUFDO3dCQUNoQixTQUFTLEVBQUUsSUFBSTtx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