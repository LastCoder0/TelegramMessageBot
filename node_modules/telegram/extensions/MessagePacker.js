"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessagePacker = void 0;
const core_1 = require("../tl/core");
const core_2 = require("../tl/core");
const BinaryWriter_1 = require("./BinaryWriter");
const USE_INVOKE_AFTER_WITH = [
    "messages.SendMessage",
    "messages.SendMedia",
    "messages.SendMultiMedia",
    "messages.ForwardMessages",
    "messages.SendInlineBotResult",
    "users.GetUsers",
];
class MessagePacker {
    constructor(state, logger) {
        this._state = state;
        this._queue = [];
        this._ready = new Promise((resolve) => {
            this.setReady = resolve;
        });
        this._log = logger;
    }
    values() {
        return this._queue;
    }
    append(state) {
        /* TODO later. still need fixes
        // we need to check if there is already a request with the same name that we should send after.
        if (USE_INVOKE_AFTER_WITH.includes(state.request.className)) {
            // we now need to check if there is any request in queue already.
            for (let i = this._queue.length - 1; i >= 0; i--) {
                if (
                    USE_INVOKE_AFTER_WITH.includes(
                        this._queue[i].request.className
                    )
                ) {
                    state.after = this._queue[i];
                    break;
                }
            }
        }
        */
        this._queue.push(state);
        if (this.setReady) {
            this.setReady(true);
        }
    }
    extend(states) {
        for (const state of states) {
            this.append(state);
        }
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._queue.length) {
                this._ready = new Promise((resolve) => {
                    this.setReady = resolve;
                });
                yield this._ready;
            }
            if (!this._queue[this._queue.length - 1]) {
                this._queue = [];
                return;
            }
            let data;
            let buffer = new BinaryWriter_1.BinaryWriter(Buffer.alloc(0));
            const batch = [];
            let size = 0;
            while (this._queue.length &&
                batch.length <= core_1.MessageContainer.MAXIMUM_LENGTH) {
                const state = this._queue.shift();
                size += state.data.length + core_2.TLMessage.SIZE_OVERHEAD;
                if (size <= core_1.MessageContainer.MAXIMUM_SIZE) {
                    let afterId;
                    if (state.after) {
                        afterId = state.after.msgId;
                    }
                    state.msgId = yield this._state.writeDataAsMessage(buffer, state.data, state.request.classType === "request", afterId);
                    this._log.debug(`Assigned msgId = ${state.msgId} to ${state.request.className ||
                        state.request.constructor.name}`);
                    batch.push(state);
                    continue;
                }
                if (batch.length) {
                    this._queue.unshift(state);
                    break;
                }
                this._log.warn(`Message payload for ${state.request.className || state.request.constructor.name} is too long ${state.data.length} and cannot be sent`);
                state.promise.reject("Request Payload is too big");
                size = 0;
            }
            if (!batch.length) {
                return null;
            }
            if (batch.length > 1) {
                const b = Buffer.alloc(8);
                b.writeUInt32LE(core_1.MessageContainer.CONSTRUCTOR_ID, 0);
                b.writeInt32LE(batch.length, 4);
                data = Buffer.concat([b, buffer.getValue()]);
                buffer = new BinaryWriter_1.BinaryWriter(Buffer.alloc(0));
                const containerId = yield this._state.writeDataAsMessage(buffer, data, false);
                for (const s of batch) {
                    s.containerId = containerId;
                }
            }
            data = buffer.getValue();
            return { batch, data };
        });
    }
}
exports.MessagePacker = MessagePacker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZVBhY2tlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2dyYW1qcy9leHRlbnNpb25zL01lc3NhZ2VQYWNrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEscUNBQThDO0FBQzlDLHFDQUF1QztBQUN2QyxpREFBOEM7QUFJOUMsTUFBTSxxQkFBcUIsR0FBRztJQUMxQixzQkFBc0I7SUFDdEIsb0JBQW9CO0lBQ3BCLHlCQUF5QjtJQUN6QiwwQkFBMEI7SUFDMUIsOEJBQThCO0lBQzlCLGdCQUFnQjtDQUNuQixDQUFDO0FBRUYsTUFBYSxhQUFhO0lBT3RCLFlBQVksS0FBbUIsRUFBRSxNQUFXO1FBQ3hDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxNQUFNO1FBQ0YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBbUI7UUFDdEI7Ozs7Ozs7Ozs7Ozs7OztVQWVFO1FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFeEIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QjtJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBc0I7UUFDekIsS0FBSyxNQUFNLEtBQUssSUFBSSxNQUFNLEVBQUU7WUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMs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