"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromisedWebSockets = void 0;
const websocket_1 = require("websocket");
const async_mutex_1 = require("async-mutex");
const mutex = new async_mutex_1.Mutex();
const closeError = new Error("WebSocket was closed");
class PromisedWebSockets {
    constructor() {
        this.client = undefined;
        this.stream = Buffer.alloc(0);
        this.closed = true;
    }
    readExactly(number) {
        return __awaiter(this, void 0, void 0, function* () {
            let readData = Buffer.alloc(0);
            while (true) {
                const thisTime = yield this.read(number);
                readData = Buffer.concat([readData, thisTime]);
                number = number - thisTime.length;
                if (!number) {
                    return readData;
                }
            }
        });
    }
    read(number) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.closed) {
                throw closeError;
            }
            yield this.canRead;
            if (this.closed) {
                throw closeError;
            }
            const toReturn = this.stream.slice(0, number);
            this.stream = this.stream.slice(number);
            if (this.stream.length === 0) {
                this.canRead = new Promise((resolve) => {
                    this.resolveRead = resolve;
                });
            }
            return toReturn;
        });
    }
    readAll() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.closed || !(yield this.canRead)) {
                throw closeError;
            }
            const toReturn = this.stream;
            this.stream = Buffer.alloc(0);
            this.canRead = new Promise((resolve) => {
                this.resolveRead = resolve;
            });
            return toReturn;
        });
    }
    getWebSocketLink(ip, port) {
        if (port === 443) {
            return `wss://${ip}:${port}/apiws`;
        }
        else {
            return `ws://${ip}:${port}/apiws`;
        }
    }
    connect(port, ip) {
        return __awaiter(this, void 0, void 0, function* () {
            this.stream = Buffer.alloc(0);
            this.canRead = new Promise((resolve) => {
                this.resolveRead = resolve;
            });
            this.closed = false;
            this.website = this.getWebSocketLink(ip, port);
            this.client = new websocket_1.w3cwebsocket(this.website, "binary");
            return new Promise((resolve, reject) => {
                if (this.client) {
                    this.client.onopen = () => {
                        this.receive();
                        resolve(this);
                    };
                    this.client.onerror = (error) => {
                        reject(error);
                    };
                    this.client.onclose = () => {
                        if (this.resolveRead) {
                            this.resolveRead(false);
                        }
                        this.closed = true;
                    };
                    //CONTEST
                    if (typeof window !== "undefined") {
                        window.addEventListener("offline", () => __awaiter(this, void 0, void 0, function* () {
                            yield this.close();
                            if (this.resolveRead) {
                                this.resolveRead(false);
                            }
                        }));
                    }
                }
            });
        });
    }
    write(data) {
        if (this.closed) {
            throw closeError;
        }
        if (this.client) {
            this.client.send(data);
        }
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.client) {
                yield this.client.close();
            }
            this.closed = true;
        });
    }
    receive() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.client) {
                this.client.onmessage = (message) => __awaiter(this, void 0, void 0, function* () {
                    const release = yield mutex.acquire();
                    try {
                        let data;
                        //CONTEST BROWSER
                        data = Buffer.from(yield new Response(message.data).arrayBuffer());
                        this.stream = Buffer.concat([this.stream, data]);
                        if (this.resolveRead) {
                            this.resolveRead(true);
                        }
                    }
                    finally {
                        release();
                    }
                });
            }
        });
    }
}
exports.PromisedWebSockets = PromisedWebSockets;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvbWlzZWRXZWJTb2NrZXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vZ3JhbWpzL2V4dGVuc2lvbnMvUHJvbWlzZWRXZWJTb2NrZXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHlDQUF5QztBQUN6Qyw2Q0FBb0M7QUFFcEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxtQkFBSyxFQUFFLENBQUM7QUFFMUIsTUFBTSxVQUFVLEdBQUcsSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUVyRCxNQUFhLGtCQUFrQjtJQVEzQjtRQUNJLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUN2QixDQUFDO0lBRUssV0FBVyxDQUFDLE1BQWM7O1lBQzVCLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0IsT0FBTyxJQUFJLEVBQUU7Z0JBQ1QsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN6QyxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUMvQyxNQUFNLEdBQUcsTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ1QsT0FBTyxRQUFRLENBQUM7aUJBQ25CO2FBQ0o7UUFDTCxDQUFDO0tBQUE7SUFFSyxJQUFJLENBQUMsTUFBYzs7WUFDckIsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNiLE1BQU0sVUFBVSxDQUFDO2FBQ3BCO1lBQ0QsTUFBTSxJQUFJLENBQUMsT0FBTyxD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